version: '3.8'

services:
  # API Gateway
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: adobe-automation-api
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlserver://db:1433/AdobeAutomation
    depends_on:
      - redis
      - db
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    networks:
      - adobe-network
    restart: unless-stopped

  # PowerShell Automation Worker
  powershell-worker:
    build:
      context: .
      dockerfile: Dockerfile.powershell
    container_name: adobe-automation-ps
    environment:
      - ADOBE_ORG_ID=${ADOBE_ORG_ID}
      - ADOBE_CLIENT_ID=${ADOBE_CLIENT_ID}
    volumes:
      - ./creative-cloud:/app/scripts
      - ./config:/app/config:ro
      - ./logs:/app/logs
    networks:
      - adobe-network
    restart: unless-stopped

  # Python Automation Worker
  python-worker:
    build:
      context: .
      dockerfile: Dockerfile.python
    container_name: adobe-automation-py
    environment:
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./python-automation:/app
      - ./config:/app/config:ro
      - ./logs:/app/logs
    networks:
      - adobe-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adobe-automation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - adobe-network
    restart: unless-stopped

  # SQL Server Database
  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: adobe-automation-db
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD:-YourStrong@Passw0rd}
      - MSSQL_PID=Express
    volumes:
      - db-data:/var/opt/mssql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - adobe-network
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: adobe-automation-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - adobe-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: adobe-automation-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - adobe-network
    restart: unless-stopped

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: adobe-automation-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elastic-data:/usr/share/elasticsearch/data
    networks:
      - adobe-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: adobe-automation-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - adobe-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: adobe-automation-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - grafana
      - kibana
    networks:
      - adobe-network
    restart: unless-stopped

networks:
  adobe-network:
    driver: bridge

volumes:
  redis-data:
  db-data:
  prometheus-data:
  grafana-data:
  elastic-data: