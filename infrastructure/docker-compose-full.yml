version: '3.8'

services:
  # SQL Server Database
  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: adobe-mssql
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD:-YourStrong@Passw0rd}
      - MSSQL_PID=Developer
    ports:
      - "1433:1433"
    volumes:
      - mssql-data:/var/opt/mssql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/stored-procedures:/docker-entrypoint-initdb.d/procedures:ro
    networks:
      - adobe-network
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$${SA_PASSWORD}" -Q "SELECT 1" || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: adobe-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - adobe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Node.js API Server
  api:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.nodejs
    container_name: adobe-api
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mssql
      - DB_USER=sa
      - DB_PASSWORD=${DB_PASSWORD:-YourStrong@Passw0rd}
      - DB_NAME=AdobeAutomation
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET:-your-secret-key}
      - API_KEY=${API_KEY:-your-api-key}
    depends_on:
      - mssql
      - redis
    volumes:
      - ../api:/app/api:ro
      - ../config:/app/config:ro
      - api-logs:/app/logs
    networks:
      - adobe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Dashboard
  dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    container_name: adobe-dashboard
    ports:
      - "3001:3001"
    environment:
      - VITE_API_URL=http://api:8000
    depends_on:
      - api
    networks:
      - adobe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Automation Service
  python-automation:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.python
    container_name: adobe-python
    environment:
      - DB_HOST=mssql
      - DB_PASSWORD=${DB_PASSWORD:-YourStrong@Passw0rd}
      - REDIS_HOST=redis
      - ADOBE_CLIENT_ID=${ADOBE_CLIENT_ID}
      - ADOBE_CLIENT_SECRET=${ADOBE_CLIENT_SECRET}
    depends_on:
      - mssql
      - redis
    volumes:
      - ../python-automation:/app
      - python-logs:/app/logs
    networks:
      - adobe-network

  # PowerShell Automation Service
  powershell-automation:
    build:
      context: ..
      dockerfile: infrastructure/Dockerfile.powershell
    container_name: adobe-powershell
    environment:
      - DB_HOST=mssql
      - DB_PASSWORD=${DB_PASSWORD:-YourStrong@Passw0rd}
      - ADOBE_CLIENT_ID=${ADOBE_CLIENT_ID}
      - ADOBE_CLIENT_SECRET=${ADOBE_CLIENT_SECRET}
    depends_on:
      - mssql
    volumes:
      - ../creative-cloud:/app/scripts:ro
      - powershell-logs:/app/logs
    networks:
      - adobe-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: adobe-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    networks:
      - adobe-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: adobe-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
    volumes:
      - ../monitoring/grafana:/etc/grafana/provisioning:ro
      - grafana-data:/var/lib/grafana
    networks:
      - adobe-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: adobe-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - adobe-network
    restart: unless-stopped

  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: adobe-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - adobe-network
    depends_on:
      - redis
    restart: unless-stopped

  # Cadvisor for Docker metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: adobe-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - adobe-network
    restart: unless-stopped

networks:
  adobe-network:
    driver: bridge
    name: adobe-automation-network

volumes:
  mssql-data:
    name: adobe-mssql-data
  redis-data:
    name: adobe-redis-data
  prometheus-data:
    name: adobe-prometheus-data
  grafana-data:
    name: adobe-grafana-data
  api-logs:
    name: adobe-api-logs
  python-logs:
    name: adobe-python-logs
  powershell-logs:
    name: adobe-powershell-logs